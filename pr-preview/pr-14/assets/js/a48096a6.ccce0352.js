"use strict";(self.webpackChunkpush_comms_website=self.webpackChunkpush_comms_website||[]).push([[27716],{11470:(e,t,n)=>{n.d(t,{A:()=>y});var a=n(96540),s=n(18215),r=n(23104),l=n(56347),i=n(205),d=n(57485),o=n(31682),c=n(89466);function u(e){var t,n;return null!==(t=null===(n=a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))||void 0===n?void 0:n.filter(Boolean))&&void 0!==t?t:[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=null!=t?t:function(e){return u(e).map(e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}})}(n);return function(e){const t=(0,o.X)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}function f(e){let{queryString:t=!1,groupId:n}=e;const s=(0,l.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,d.aZ)(r),(0,a.useCallback)(e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})},[r,s])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=h(e),[l,d]=(0,a.useState)(()=>function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=null!==(t=a.find(e=>e.default))&&void 0!==t?t:a[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r})),[o,u]=f({queryString:n,groupId:s}),[b,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,c.Dv)(n);return[s,(0,a.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:s}),g=(()=>{const e=null!=o?o:b;return p({value:e,tabValues:r})?e:null})();(0,i.A)(()=>{g&&d(g)},[g]);return{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),m(e)},[u,m,r]),tabValues:r}}var m=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(74848);function v(e){let{className:t,block:n,selectedValue:a,selectValue:l,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),s=i[n].value;s!==a&&(o(t),l(s))},u=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{var a;const t=d.indexOf(e.currentTarget)+1;n=null!==(a=d[t])&&void 0!==a?a:d[0];break}case"ArrowLeft":{var s;const t=d.indexOf(e.currentTarget)-1;n=null!==(s=d[t])&&void 0!==s?s:d[d.length-1];break}}null===(t=n)||void 0===t||t.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:i.map(e=>{let{value:t,label:n,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>d.push(e),onKeyDown:u,onClick:c,...r,className:(0,s.A)("tabs__item",g.tabItem,null==r?void 0:r.className,{"tabs__item--active":a===t}),children:null!=n?n:t},t)})})}function j(e){let{lazy:t,children:n,selectedValue:s}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find(e=>e.props.value===s);return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function w(e){const t=b(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,x.jsx)(v,{...e,...t}),(0,x.jsx)(j,{...e,...t})]})}function y(e){const t=(0,m.A)();return(0,x.jsx)(w,{...e,children:u(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var a=n(18215);const s={tabItem:"tabItem_Ymn6"};var r=n(74848);function l(e){let{children:t,hidden:n,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,l),hidden:n,children:t})}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(96540);const s={},r=a.createContext(s);function l(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:t},e.children)}},40718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var a=n(74848),s=n(28453);n(11470),n(19365),n(13490);const r={id:"docs-chat-supported-wallet-standards",title:"Supported Wallet Standards",hide_title:!0,slug:"./supported-wallet-standards",displayed_sidebar:"pushChatSidebar",sidebar_position:3,image:"/assets/docs/previews/docs_chat--supported_wallet_standards.png"},l="Supported Wallet Standards",i={id:"chat/docs-chat-supported-wallet-standards",title:"Supported Wallet Standards",description:"Push Chat is chain agnostic and even supports messaging wallet addresses, NFT addresses, all evms (and even non-EVM in the future). Below is the list of evergrowing standards that Push Chat is compatible with, either of which you can use as per your requirements \u2014",source:"@site/docs/chat/03-Supported-Wallet-Standards.mdx",sourceDirName:"chat",slug:"/chat/supported-wallet-standards",permalink:"/push-comms-website/pr-preview/pr-14/docs/chat/supported-wallet-standards",draft:!1,unlisted:!1,editUrl:"https://github.com/push-protocol/push-comms-website/blob/main/docs/chat/03-Supported-Wallet-Standards.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"docs-chat-supported-wallet-standards",title:"Supported Wallet Standards",hide_title:!0,slug:"./supported-wallet-standards",displayed_sidebar:"pushChatSidebar",sidebar_position:3,image:"/assets/docs/previews/docs_chat--supported_wallet_standards.png"},sidebar:"pushChatSidebar",previous:{title:"Quickstart",permalink:"/push-comms-website/pr-preview/pr-14/docs/chat/quickstart"},next:{title:"Build",permalink:"/push-comms-website/pr-preview/pr-14/docs/chat/build"}},d={},o=[{value:"Standard Wallet Address",id:"standard-wallet-address",level:3},{value:"Chain Agnostic Wallet Address",id:"chain-agnostic-wallet-address",level:3},{value:"Lens profile / Cyberconnect profile / Any NFT profile",id:"lens-profile--cyberconnect-profile--any-nft-profile",level:3},{value:"Any group or individual chat",id:"any-group-or-individual-chat",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"supported-wallet-standards",children:"Supported Wallet Standards"}),"\n",(0,a.jsx)(t.p,{children:"Push Chat is chain agnostic and even supports messaging wallet addresses, NFT addresses, all evms (and even non-EVM in the future). Below is the list of evergrowing standards that Push Chat is compatible with, either of which you can use as per your requirements \u2014"}),"\n",(0,a.jsx)(n,{children:(0,a.jsx)("title",{children:"Types of Recipient | Push Chat | Push Documentation"})}),"\n","\n","\n",(0,a.jsx)(t.h3,{id:"standard-wallet-address",children:"Standard Wallet Address"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Standard Wallet Address"})," - Standard wallet is supported and used by default"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666"})]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Sending to standard wallet address - defaults to EVM format\nawait userAlice.chat.send('0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666', {\n  content: 'Hello PushAI!',\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"chain-agnostic-wallet-address",children:"Chain Agnostic Wallet Address"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Chain Agnostic Wallet Address"})," - Pass ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"{chain_standard}:{account_id}"})})," format to use this instead of standard wallet address. SDK converts all normal wallet address to chain agnostic ones by default."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"eip155:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"cosmos:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"starknet:0x02dd1b492765c064eac4039e3841aa5f382773b598097a40073bd8b48170ab57"})]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Blockchain Agnostic Wallet Address has been inspired by ",(0,a.jsx)(t.a,{href:"https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md",children:"CAIP-10 standard"}),", which is a great step in marking wallet address blockchain agnostic."]})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Sending to chain agnostic wallet address, support eip155 currently\nawait userAlice.chat.send('eip155:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666', {\n  content: 'Hello PushAI!',\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"lens-profile--cyberconnect-profile--any-nft-profile",children:"Lens profile / Cyberconnect profile / Any NFT profile"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"NFT profile"})," - Pass ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"nft:{chain_standard}:{nftChainId}:{nftContractAddress}:{nftTokenId}"})})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"nft:eip155:11155111:0x42af3147f17239341477113484752D5D3dda997B:2:1683058528"})]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Sending to nft format, any nfts supported including .lens, .crypto, .polygon or your crypto punks\nawait userAlice.chat.send(\n  'nft:eip155:11155111:0x42af3147f17239341477113484752D5D3dda997B:2:1683058528',\n  {\n    content: 'Hello harsh.lens',\n  }\n);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"any-group-or-individual-chat",children:"Any group or individual chat"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Chat ID"})," - Pass ",(0,a.jsx)(t.strong,{children:"chatid"})," that can be obtained from Push SDK to target a specific group (or dms)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"usage"})})," - ",(0,a.jsx)(t.code,{children:"chatid:4ac5ab85c9c3d57adbdf2dba79357e56b2f9ef0256befe750d9f93af78d2ca68"})]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Sending to chain agnostic wallet address, support eip155 currently\nawait userAlice.chat.send(\n  'chatid:4ac5ab85c9c3d57adbdf2dba79357e56b2f9ef0256befe750d9f93af78d2ca68',\n  {\n    content:\n      'Hello #BRB token gated community with 1 $PUSH on either ETH or Polygon',\n  }\n);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);