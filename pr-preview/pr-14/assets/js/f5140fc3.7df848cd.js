"use strict";(self.webpackChunkpush_comms_website=self.webpackChunkpush_comms_website||[]).push([[10319],{11470:(e,n,t)=>{t.d(n,{A:()=>j});var s=t(96540),i=t(18215),o=t(23104),r=t(56347),a=t(205),l=t(57485),c=t(31682),u=t(89466);function h(e){var n,t;return null!==(n=null===(t=s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=null!=n?n:function(e){return h(e).map(e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}})}(t);return function(e){const n=(0,c.X)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}function f(e){let{queryString:n=!1,groupId:t}=e;const i=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,l.aZ)(o),(0,s.useCallback)(e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})},[o,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,o=d(e),[r,l]=(0,s.useState)(()=>function(e){var n;let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=null!==(n=s.find(e=>e.default))&&void 0!==n?n:s[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:o})),[c,h]=f({queryString:t,groupId:i}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,u.Dv)(t);return[i,(0,s.useCallback)(e=>{t&&o.set(e)},[t,o])]}({groupId:i}),w=(()=>{const e=null!=c?c:m;return p({value:e,tabValues:o})?e:null})();(0,a.A)(()=>{w&&l(w)},[w]);return{selectedValue:r,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),g(e)},[h,g,o]),tabValues:o}}var g=t(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function v(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),i=a[t].value;i!==s&&(c(n),r(i))},h=e=>{var n;let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{var s;const n=l.indexOf(e.currentTarget)+1;t=null!==(s=l[n])&&void 0!==s?s:l[0];break}case"ArrowLeft":{var i;const n=l.indexOf(e.currentTarget)-1;t=null!==(i=l[n])&&void 0!==i?i:l[l.length-1];break}}null===(n=t)||void 0===n||n.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:a.map(e=>{let{value:n,label:t,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:h,onClick:u,...o,className:(0,i.A)("tabs__item",w.tabItem,null==o?void 0:o.className,{"tabs__item--active":s===n}),children:null!=t?t:n},n)})})}function x(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find(e=>e.props.value===i);return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function y(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",w.tabList),children:[(0,b.jsx)(v,{...e,...n}),(0,b.jsx)(x,{...e,...n})]})}function j(e){const n=(0,g.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var s=t(18215);const i={tabItem:"tabItem_Ymn6"};var o=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,r),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},32466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=t(74848),i=t(28453);t(11470),t(19365);const o={id:"docs-notifications-settings-with-showrunners-example",title:"Showrunners X Notification Settings",hide_title:!0,slug:"./notification-settings-with-showrunners-example",displayed_sidebar:"pushNotificationSidebar",sidebar_position:7,image:"/assets/docs/previews/docs_notifications_settings_with_showrunners_example--showrunners_x_notification_settings.png"},r="Trigger Notification Settings in Showrunners",a={id:"notifications/showrunners-scaffold/Examples/docs-notifications-settings-with-showrunners-example",title:"Showrunners X Notification Settings",description:"This tutorial is intended to get you up and going by providing a step-by-step tutorial in integrating notification settings in the showrunners framework. Checkout Showrunners Docs, Showrunners Framework, Channel Settings Docs and Channel Settings Demo for better understanding!",source:"@site/docs/notifications/04-showrunners-scaffold/03-Examples/07-Showrunner-Example-Notification-Settings-With-Showrunners.mdx",sourceDirName:"notifications/04-showrunners-scaffold/03-Examples",slug:"/notifications/showrunners-scaffold/Examples/notification-settings-with-showrunners-example",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/notification-settings-with-showrunners-example",draft:!1,unlisted:!1,editUrl:"https://github.com/push-protocol/push-comms-website/blob/main/docs/notifications/04-showrunners-scaffold/03-Examples/07-Showrunner-Example-Notification-Settings-With-Showrunners.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"docs-notifications-settings-with-showrunners-example",title:"Showrunners X Notification Settings",hide_title:!0,slug:"./notification-settings-with-showrunners-example",displayed_sidebar:"pushNotificationSidebar",sidebar_position:7,image:"/assets/docs/previews/docs_notifications_settings_with_showrunners_example--showrunners_x_notification_settings.png"},sidebar:"pushNotificationSidebar",previous:{title:"Advance - Protocol based trigger (Oasis protocol)",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/advance-protocol-based-trigger-oasis-protocol"},next:{title:"Notification Settings in ETH Tracker",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/eth-tracker-with-showrunners-example"}},l={},c=[{value:"Setup the Showrunners in your local machine",id:"setup-the-showrunners-in-your-local-machine",level:3},{value:"Install Dependencies &amp; start up",id:"install-dependencies--start-up",level:3},{value:"Import the Push SDK",id:"import-the-push-sdk",level:3},{value:"Channel File",id:"channel-file",level:4},{value:"Build the notification payload",id:"build-the-notification-payload",level:3},{value:"Setup Notification trigger",id:"setup-notification-trigger",level:3},{value:"How does it actually work?",id:"how-does-it-actually-work",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"trigger-notification-settings-in-showrunners",children:"Trigger Notification Settings in Showrunners"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial is intended to get you up and going by providing a step-by-step tutorial in integrating notification settings in the showrunners framework. Checkout ",(0,s.jsx)(n.a,{href:"https://comms.push.org/docs/notifications/showrunners-scaffold/get-started/",children:"Showrunners Docs"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/push-protocol/push-showrunners-framework/tree/main",children:"Showrunners Framework"}),", ",(0,s.jsx)(n.a,{href:"https://comms.push.org/docs/notifications/build/create-channel-settings/",children:"Channel Settings Docs"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/push-protocol/push-showrunners-framework/tree/main/src/sample_showrunners/bank",children:"Channel Settings Demo"})," for better understanding!"]}),"\n",(0,s.jsx)(t,{children:(0,s.jsx)("title",{children:"Notification Settings with Showrunners tutorial | Push Notification | Push\n  Documentation"})}),"\n","\n","\n",(0,s.jsx)(n.h3,{id:"setup-the-showrunners-in-your-local-machine",children:"Setup the Showrunners in your local machine"}),"\n",(0,s.jsxs)(n.p,{children:["For detailed, step-by-step guide visit the Showrunners ",(0,s.jsx)(n.a,{href:"https://comms.push.org/docs/notifications/showrunners-scaffold/get-started/",children:"docs"}),". First we need to create a folder in ",(0,s.jsx)(n.code,{children:"src/showrunners/<your_channel_name>"})]}),"\n",(0,s.jsx)(n.h3,{id:"install-dependencies--start-up",children:"Install Dependencies & start up"}),"\n",(0,s.jsx)(n.p,{children:"Navigate to the SDK directory and install required dependencies."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd push-showrunners-framework\nyarn install\ndocker-compose up\nyarn run dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"import-the-push-sdk",children:"Import the Push SDK"}),"\n",(0,s.jsxs)(n.p,{children:["After you have created a channel folder. Refer to Showrunners ",(0,s.jsx)(n.a,{href:"https://comms.push.org/docs/notifications/showrunners-scaffold/get-started/",children:"docs"}),". Move to the [name]Channel.ts file and import the dependencies."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { CONSTANTS, PushAPI } from '@pushprotocol/restapi';\n"})}),"\n",(0,s.jsx)(n.h4,{id:"channel-file",children:(0,s.jsx)(n.a,{href:"https://github.com/push-protocol/push-showrunners-framework/blob/main/src/sample_showrunners/bank/bankChannel.ts",children:"Channel File"})}),"\n",(0,s.jsx)(n.p,{children:"In order to send notification, we need to have the instance of the user channel. To get that, we need to add the below function in our 'Channel class'\n."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"async initializeUser() {\n  const provider = new ethers.providers.WebSocketProvider(process.env.ALCHEMY_WEBSOCKET);\n  const contract = new ethers.Contract(contractAddress, contractAbi, provider);\n\n  const signer = new ethers.Wallet(\n    process.env.PRIVATE_KEY, // Private key of the channel owner (or channel creation wallet)\n      provider\n  );\n\n  // PushAPI.initialize(signer, {options?});\n  // 'CONSTANTS.ENV.PROD' -> mainnet apps | 'CONSTANTS.ENV.STAGING' -> testnet apps\n  const userAlice = await PushAPI.initialize(signer, { env: CONSTANTS.ENV.STAGING });\n\n  return { contract, userAlice };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"build-the-notification-payload",children:"Build the notification payload"}),"\n",(0,s.jsxs)(n.p,{children:["Design your own payload with custom values in the when you want to trigger notifications. To learn more about notification settings, refer to ",(0,s.jsx)(n.a,{href:"https://comms.push.org/docs/notifications/build/create-channel-settings/",children:"docs"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const payload = {\n  notification: {\n    title: 'Title',\n    body: 'Notif Body',\n  },\n  payload: {\n    title: 'Title',\n    body: 'Payload body',\n    cta: 'https://google.com/',\n    embed: 'https://avatars.githubusercontent.com/u/64157541?s=200&v=4',\n    // index of the notification the channel wants to trigger, in this for 1nd index which is for Boolean type\n    category: 1, // Depending upon your use-case\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"setup-notification-trigger",children:"Setup Notification trigger"}),"\n",(0,s.jsx)(n.p,{children:"We create a function that will send notifications depending upon the type. To get that, we need to add the below function in our 'Channel class'\n."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"async sendThroughNotifSettings(userAlice, payload) {\n  try {\n    const notifRes = await userAlice.channel.send(['*'], payload);\n    return notifRes;\n  } catch (error) {\n    this.logInfo(\"ERROR\ud83d\udd34 from sendThroughNotifSettings: \", error);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"how-does-it-actually-work",children:"How does it actually work?"}),"\n",(0,s.jsxs)(n.p,{children:["The Showrunner framework listens to the on-chain events through web-sockets. According to events emitted, an user can create respective notifications and subscribers can opt-in as per their wish. The ",(0,s.jsx)(n.code,{children:"send"})," function takes in an array of all the addresses eligible to receive notifications. In case of ",(0,s.jsx)(n.code,{children:"*"}),", all the addresses subscribed to the channel is eligible for it. You can have a custom array of addresses as well. Furthermore, the ",(0,s.jsx)(n.code,{children:"payload"})," contains ",(0,s.jsx)(n.code,{children:"category"})," which specifies the notification category (as setup by the user). So in the above example all addresses who opted-in for ",(0,s.jsx)(n.code,{children:"category-1"})," (bank holiday - boolean in this case), will receive the notification."]}),"\n",(0,s.jsxs)(n.p,{children:["Summarizing the entire process, web-sockets listen to on-chain events and notifies the showrunners framework. Depending upon the array provided in the ",(0,s.jsx)(n.code,{children:"send"})," function and the ",(0,s.jsx)(n.code,{children:"category"})," provided in the ",(0,s.jsx)(n.code,{children:"payload"}),", users opted in for the notification type, receives it."]}),"\n",(0,s.jsx)(n.p,{children:"You are all set to send notifications through the showrunners framework. Now, bundling up notification settings with web-sockets you can trigger custom notifications based on on-chain activities. Isn't this awesome?\u2728"}),"\n",(0,s.jsx)(n.p,{children:"Explore more possibilities and ways to make it more useful for your users. Happy building\ud83c\udfc6"}),"\n",(0,s.jsxs)(n.p,{children:["If you enjoyed this tutorial, Do join our ",(0,s.jsx)(n.a,{href:"https://discord.com/invite/pushprotocol",children:"discord server"})," to meet other dev and builders."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);