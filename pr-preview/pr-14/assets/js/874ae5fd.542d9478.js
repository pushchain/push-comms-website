"use strict";(self.webpackChunkpush_comms_website=self.webpackChunkpush_comms_website||[]).push([[37249],{28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(96540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},33068:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>C,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var t=a(74848),i=a(28453);const o={id:"docs-notifications-showrunners-examples-advance-protocol-based-trigger-oasis-protocol",title:"Advance - Protocol based trigger (Oasis protocol)",hide_title:!0,slug:"./advance-protocol-based-trigger-oasis-protocol",displayed_sidebar:"pushNotificationSidebar",sidebar_position:6,image:"/assets/docs/previews/docs_notifications_showrunners_examples_advance_protocol_based_trigger_oasis_protocol--advance_-_protocol_based_trigger_(oasis_protocol).png"},s="Advance - Protocol based trigger (Oasis protocol example) via showrunner scaffold",r={id:"notifications/showrunners-scaffold/Examples/docs-notifications-showrunners-examples-advance-protocol-based-trigger-oasis-protocol",title:"Advance - Protocol based trigger (Oasis protocol)",description:"We will be looking into the more complex side of implementing channel notifications trigger built on top of showrunners scaffold. This is a step by step example that triggers notification for vaults of Oasis protocol that are at risk of liquidations",source:"@site/docs/notifications/04-showrunners-scaffold/03-Examples/06-Showrunner-Example-Advance-Oasis-Based-Trigger.mdx",sourceDirName:"notifications/04-showrunners-scaffold/03-Examples",slug:"/notifications/showrunners-scaffold/Examples/advance-protocol-based-trigger-oasis-protocol",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/advance-protocol-based-trigger-oasis-protocol",draft:!1,unlisted:!1,editUrl:"https://github.com/push-protocol/push-comms-website/blob/main/docs/notifications/04-showrunners-scaffold/03-Examples/06-Showrunner-Example-Advance-Oasis-Based-Trigger.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"docs-notifications-showrunners-examples-advance-protocol-based-trigger-oasis-protocol",title:"Advance - Protocol based trigger (Oasis protocol)",hide_title:!0,slug:"./advance-protocol-based-trigger-oasis-protocol",displayed_sidebar:"pushNotificationSidebar",sidebar_position:6,image:"/assets/docs/previews/docs_notifications_showrunners_examples_advance_protocol_based_trigger_oasis_protocol--advance_-_protocol_based_trigger_(oasis_protocol).png"},sidebar:"pushNotificationSidebar",previous:{title:"DeFi based trigger",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/defi-based-trigger"},next:{title:"Showrunners X Notification Settings",permalink:"/push-comms-website/pr-preview/pr-14/docs/notifications/showrunners-scaffold/Examples/notification-settings-with-showrunners-example"}},c={},d=[{value:"Use case for Notification",id:"use-case-for-notification",level:3},{value:"Step 1. Installing the dependencies",id:"step-1-installing-the-dependencies",level:3},{value:"Step 2. Setup channel folder",id:"step-2-setup-channel-folder",level:3},{value:"Step 3. Adding necessary files into the folder",id:"step-3-adding-necessary-files-into-the-folder",level:3},{value:"Adding contarctAddress.json file",id:"adding-contarctaddressjson-file",level:4},{value:"Adding oasisChannel.ts file",id:"adding-oasischannelts-file",level:4},{value:"Adding oasisJobs.ts file",id:"adding-oasisjobsts-file",level:4},{value:"Adding oasisRoutes.ts file",id:"adding-oasisroutests-file",level:4},{value:"Setting up keys file for channel",id:"setting-up-keys-file-for-channel",level:4}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Head:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"advance---protocol-based-trigger-oasis-protocol-example-via-showrunner-scaffold",children:"Advance - Protocol based trigger (Oasis protocol example) via showrunner scaffold"}),"\n",(0,t.jsx)(n.p,{children:"We will be looking into the more complex side of implementing channel notifications trigger built on top of showrunners scaffold. This is a step by step example that triggers notification for vaults of Oasis protocol that are at risk of liquidations"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"GM!"})," Before going to the coding part directly, we used ",(0,t.jsx)(n.a,{href:"https://docs.makerdao.com/",children:"MakerDAO "}),"documentation for implementing ",(0,t.jsx)(n.a,{href:"https://oasis.app/",children:"Oasis "}),"channel."]}),"\n",(0,t.jsx)(a,{children:(0,t.jsx)("title",{children:"Protocol based trigger (Oasis protocol liquidation example) | Example |\n  Showrunners Scaffold | Push Notifications | Push Documentation"})}),"\n",(0,t.jsx)(n.h3,{id:"use-case-for-notification",children:"Use case for Notification"}),"\n",(0,t.jsx)(n.p,{children:"Sending notification for vaults which are at risk of liquidation. For implementing this we will be getting vault details of users and comparing it with the next price of that particular vaults."}),"\n",(0,t.jsx)(n.p,{children:"Let's start building the channel -"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-installing-the-dependencies",children:"Step 1. Installing the dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["We need to install ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@makerdao/dai",children:"@makerdao/dai"})," and ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@makerdao/dai-plugin-mcd",children:"@makerdao/dai-plugin-mcd"})," packages into our repository using following command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm i @makerdao/dai-plugin-mcd @makerdao/dai\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-setup-channel-folder",children:"Step 2. Setup channel folder"}),"\n",(0,t.jsx)(n.p,{children:"For starting with showrunners and setting it up follow this guide here. // need to add link"}),"\n",(0,t.jsxs)(n.p,{children:["First we need to create a folder in ",(0,t.jsx)(n.code,{children:"src/showrunners/<your_channel_name>"})]}),"\n",(0,t.jsx)(n.h3,{id:"step-3-adding-necessary-files-into-the-folder",children:"Step 3. Adding necessary files into the folder"}),"\n",(0,t.jsxs)(n.h4,{id:"adding-contarctaddressjson-file",children:["Adding ",(0,t.jsx)(n.a,{href:"#adding-contarctaddressjson-file",children:"contarctAddress.json"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'// Contains every vault address\n{\n  "CHANGELOG": "0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F",\n  "MULTICALL": "0x5e227AD1969Ea493B43F840cfF78d08a6fc17796",\n  "FAUCET": "0x0000000000000000000000000000000000000000",\n  "MCD_DEPLOY": "0xbaa65281c2FA2baAcb2cb550BA051525A480D3F4",\n  "FLIP_FAB": "0x4ACdbe9dd0d00b36eC2050E805012b8Fc9974f2b",\n  "CLIP_FAB": "0x0716F25fBaAae9b63803917b6125c10c313dF663",\n  "CALC_FAB": "0xE1820A2780193d74939CcA104087CADd6c1aA13A",\n  "LERP_FAB": "0x9175561733D138326FDeA86CdFdF53e92b588276",\n  "JOIN_FAB": "0xf1738d22140783707Ca71CB3746e0dc7Bf2b0264",\n  "MCD_GOV": "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",\n  "GOV_GUARD": "0x6eEB68B2C7A918f36B78E2DB80dcF279236DDFb8",\n  "MCD_ADM": "0x0a3f6849f78076aefaDf113F5BED87720274dDC0",\n  "VOTE_PROXY_FACTORY": "0x6FCD258af181B3221073A96dD90D1f7AE7eEc408",\n  "VOTE_DELEGATE_PROXY_FACTORY": "0xD897F108670903D1d6070fcf818f9db3615AF272",\n  "MCD_VAT": "0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B",\n  "MCD_JUG": "0x19c0976f590D67707E62397C87829d896Dc0f1F1",\n  "MCD_CAT": "0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea",\n  "MCD_DOG": "0x135954d155898D42C90D2a57824C690e0c7BEf1B",\n  "MCD_VOW": "0xA950524441892A31ebddF91d3cEEFa04Bf454466",\n  "MCD_JOIN_DAI": "0x9759A6Ac90977b93B58547b4A71c78317f391A28",\n  "MCD_FLAP": "0xC4269cC7acDEdC3794b221aA4D9205F564e27f0d",\n  "MCD_FLOP": "0xA41B6EF151E06da0e34B009B86E828308986736D",\n  "MCD_PAUSE": "0xbE286431454714F511008713973d3B053A2d38f3",\n  "MCD_PAUSE_PROXY": "0xBE8E3e3618f7474F8cB1d074A26afFef007E98FB",\n  "MCD_GOV_ACTIONS": "0x4F5f0933158569c026d617337614d00Ee6589B6E",\n  "MCD_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",\n  "MCD_SPOT": "0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3",\n  "MCD_POT": "0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7",\n  "MCD_END": "0xBB856d1742fD182a90239D7AE85706C2FE4e5922",\n  "MCD_ESM": "0x29CfBd381043D00a98fD9904a431015Fef07af2f",\n  "PROXY_ACTIONS": "0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038",\n  "PROXY_ACTIONS_END": "0x7AfF9FC9faD225e3c88cDA06BC56d8Aca774bC57",\n  "PROXY_ACTIONS_DSR": "0x07ee93aEEa0a36FfF2A9B95dd22Bd6049EE54f26",\n  "CDP_MANAGER": "0x5ef30b9986345249bc32d8928B7ee64DE9435E39",\n  "DSR_MANAGER": "0x373238337Bfe1146fb49989fc222523f83081dDb",\n  "GET_CDPS": "0x36a724Bd100c39f0Ea4D3A20F7097eE01A8Ff573",\n  "ILK_REGISTRY": "0x5a464C28D19848f44199D003BeF5ecc87d090F87",\n  "OSM_MOM": "0x76416A4d5190d071bfed309861527431304aA14f",\n  "FLIPPER_MOM": "0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472",\n  "CLIPPER_MOM": "0x79FBDF16b366DFb14F66cE4Ac2815Ca7296405A0",\n  "MCD_IAM_AUTO_LINE": "0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3",\n  "MCD_FLASH": "0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853",\n  "PROXY_FACTORY": "0xA26e15C895EFc0616177B7c1e7270A4C7D51C997",\n  "PROXY_REGISTRY": "0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4",\n  "MCD_VEST_DAI": "0x2Cc583c0AaCDaC9e23CB601fDA8F1A0c56Cdcb71",\n  "MCD_VEST_MKR": "0x0fC8D4f2151453ca0cA56f07359049c8f07997Bd",\n  "MCD_VEST_MKR_TREASURY": "0x6D635c8d08a1eA2F1687a5E46b666949c977B7dd",\n  "ETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",\n  "PIP_ETH": "0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763",\n  "MCD_JOIN_ETH_A": "0x2F0b23f53734252Bda2277357e97e1517d6B042A",\n  "MCD_CLIP_ETH_A": "0xc67963a226eddd77B91aD8c421630A1b0AdFF270",\n  "MCD_CLIP_CALC_ETH_A": "0x7d9f92DAa9254Bbd1f479DBE5058f74C2381A898",\n  "MCD_JOIN_ETH_B": "0x08638eF1A205bE6762A8b935F5da9b700Cf7322c",\n  "MCD_CLIP_ETH_B": "0x71eb894330e8a4b96b8d6056962e7F116F50e06F",\n  "MCD_CLIP_CALC_ETH_B": "0x19E26067c4a69B9534adf97ED8f986c49179dE18",\n  "MCD_JOIN_ETH_C": "0xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E",\n  "MCD_CLIP_ETH_C": "0xc2b12567523e3f3CBd9931492b91fe65b240bc47",\n  "MCD_CLIP_CALC_ETH_C": "0x1c4fC274D12b2e1BBDF97795193D3148fCDa6108",\n  "BAT": "0x0D8775F648430679A709E98d2b0Cb6250d2887EF",\n  "PIP_BAT": "0xB4eb54AF9Cc7882DF0121d26c5b97E802915ABe6",\n  "MCD_JOIN_BAT_A": "0x3D0B1912B66114d4096F48A8CEe3A56C231772cA",\n  "MCD_CLIP_BAT_A": "0x3D22e6f643e2F4c563fD9db22b229Cbb0Cd570fb",\n  "MCD_CLIP_CALC_BAT_A": "0x2e118153D304a0d9C5838D5FCb70CEfCbEc81DC2",\n  "USDC": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",\n  "PIP_USDC": "0x77b68899b99b686F415d074278a9a16b336085A0",\n  "MCD_JOIN_USDC_A": "0xA191e578a6736167326d05c119CE0c90849E84B7",\n  "MCD_CLIP_USDC_A": "0x046b1A5718da6A226D912cFd306BA19980772908",\n  "MCD_CLIP_CALC_USDC_A": "0x0FCa4ba0B80123b5d22dD3C8BF595F3E561d594D",\n  "MCD_JOIN_USDC_B": "0x2600004fd1585f7270756DDc88aD9cfA10dD0428",\n  "MCD_CLIP_USDC_B": "0x5590F23358Fe17361d7E4E4f91219145D8cCfCb3",\n  "MCD_CLIP_CALC_USDC_B": "0xD6FE411284b92d309F79e502Dd905D7A3b02F561",\n  "MCD_JOIN_PSM_USDC_A": "0x0A59649758aa4d66E25f08Dd01271e891fe52199",\n  "MCD_CLIP_PSM_USDC_A": "0x66609b4799fd7cE12BA799AD01094aBD13d5014D",\n  "MCD_CLIP_CALC_PSM_USDC_A": "0xbeE028b5Fa9eb0aDAC5eeF7E5B13383172b91A4E",\n  "MCD_PSM_USDC_A": "0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A",\n  "WBTC": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",\n  "PIP_WBTC": "0xf185d0682d50819263941e5f4EacC763CC5C6C42",\n  "MCD_JOIN_WBTC_A": "0xBF72Da2Bd84c5170618Fbe5914B0ECA9638d5eb5",\n  "MCD_CLIP_WBTC_A": "0x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C",\n  "MCD_CLIP_CALC_WBTC_A": "0x5f4CEa97ca1030C6Bd38429c8a0De7Cd4981C70A",\n  "MCD_JOIN_WBTC_B": "0xfA8c996e158B80D77FbD0082BB437556A65B96E0",\n  "MCD_CLIP_WBTC_B": "0xe30663C6f83A06eDeE6273d72274AE24f1084a22",\n  "MCD_CLIP_CALC_WBTC_B": "0xeb911E99D7ADD1350DC39d84D60835BA9B287D96",\n  "MCD_JOIN_WBTC_C": "0x7f62f9592b823331E012D3c5DdF2A7714CfB9de2",\n  "MCD_CLIP_WBTC_C": "0x39F29773Dcb94A32529d0612C6706C49622161D1",\n  "MCD_CLIP_CALC_WBTC_C": "0x4fa2A328E7f69D023fE83454133c273bF5ACD435",\n  "TUSD": "0x0000000000085d4780B73119b644AE5ecd22b376",\n  "PIP_TUSD": "0xeE13831ca96d191B688A670D47173694ba98f1e5",\n  "MCD_JOIN_TUSD_A": "0x4454aF7C8bb9463203b66C816220D41ED7837f44",\n  "MCD_CLIP_TUSD_A": "0x0F6f88f8A4b918584E3539182793a0C276097f44",\n  "MCD_CLIP_CALC_TUSD_A": "0x059acdf311E38aAF77139638228d393Ff27639bF",\n  "ZRX": "0xE41d2489571d322189246DaFA5ebDe1F4699F498",\n  "PIP_ZRX": "0x7382c066801E7Acb2299aC8562847B9883f5CD3c",\n  "MCD_JOIN_ZRX_A": "0xc7e8Cd72BDEe38865b4F5615956eF47ce1a7e5D0",\n  "MCD_CLIP_ZRX_A": "0xdc90d461E148552387f3aB3EBEE0Bdc58Aa16375",\n  "MCD_CLIP_CALC_ZRX_A": "0xebe5e9D77b9DBBA8907A197f4c2aB00A81fb0C4e",\n  "KNC": "0xdd974D5C2e2928deA5F71b9825b8b646686BD200",\n  "PIP_KNC": "0xf36B79BD4C0904A5F350F1e4f776B81208c13069",\n  "MCD_JOIN_KNC_A": "0x475F1a89C1ED844A08E8f6C50A00228b5E59E4A9",\n  "MCD_CLIP_KNC_A": "0x006Aa3eB5E666D8E006aa647D4afAB212555Ddea",\n  "MCD_CLIP_CALC_KNC_A": "0x82c41e2ADE28C066a5D3A1E3f5B444a4075C1584",\n  "MANA": "0x0F5D2fB29fb7d3CFeE444a200298f468908cC942",\n  "PIP_MANA": "0x8067259EA630601f319FccE477977E55C6078C13",\n  "MCD_JOIN_MANA_A": "0xA6EA3b9C04b8a38Ff5e224E7c3D6937ca44C0ef9",\n  "MCD_CLIP_MANA_A": "0xF5C8176E1eB0915359E46DEd16E52C071Bb435c0",\n  "MCD_CLIP_CALC_MANA_A": "0xABbCd14FeDbb2D39038327055D9e615e178Fd64D",\n  "USDT": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n  "PIP_USDT": "0x7a5918670B0C390aD25f7beE908c1ACc2d314A3C",\n  "MCD_JOIN_USDT_A": "0x0Ac6A1D74E84C2dF9063bDDc31699FF2a2BB22A2",\n  "MCD_CLIP_USDT_A": "0xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d",\n  "MCD_CLIP_CALC_USDT_A": "0x1Cf3DE6D570291CDB88229E70037d1705d5be748",\n  "PAXUSD": "0x8E870D67F660D95d5be530380D0eC0bd388289E1",\n  "PAX": "0x8E870D67F660D95d5be530380D0eC0bd388289E1",\n  "PIP_PAXUSD": "0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC",\n  "PIP_PAX": "0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC",\n  "MCD_JOIN_PAXUSD_A": "0x7e62B7E279DFC78DEB656E34D6a435cC08a44666",\n  "MCD_CLIP_PAXUSD_A": "0xBCb396Cd139D1116BD89562B49b9D1d6c25378B0",\n  "MCD_CLIP_CALC_PAXUSD_A": "0xAB98De83840b8367046383D2Adef9959E130923e",\n  "MCD_JOIN_PSM_PAX_A": "0x7bbd8cA5e413bCa521C2c80D8d1908616894Cf21",\n  "MCD_CLIP_PSM_PAX_A": "0x5322a3551bc6a1b39d5D142e5e38Dc5B4bc5B3d2",\n  "MCD_CLIP_CALC_PSM_PAX_A": "0xC19eAc21A4FccdD30812F5fF5FebFbD6817b7593",\n  "MCD_PSM_PAX_A": "0x961Ae24a1Ceba861D1FDf723794f6024Dc5485Cf",\n  "COMP": "0xc00e94Cb662C3520282E6f5717214004A7f26888",\n  "PIP_COMP": "0xBED0879953E633135a48a157718Aa791AC0108E4",\n  "MCD_JOIN_COMP_A": "0xBEa7cDfB4b49EC154Ae1c0D731E4DC773A3265aA",\n  "MCD_CLIP_COMP_A": "0x2Bb690931407DCA7ecE84753EA931ffd304f0F38",\n  "MCD_CLIP_CALC_COMP_A": "0x1f546560EAa70985d962f1562B65D4B182341a63",\n  "LRC": "0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD",\n  "PIP_LRC": "0x9eb923339c24c40Bef2f4AF4961742AA7C23EF3a",\n  "MCD_JOIN_LRC_A": "0x6C186404A7A238D3d6027C0299D1822c1cf5d8f1",\n  "MCD_CLIP_LRC_A": "0x81C5CDf4817DBf75C7F08B8A1cdaB05c9B3f70F7",\n  "MCD_CLIP_CALC_LRC_A": "0x6856CCA4c881CAf29B6563bA046C7Bb73121fb9d",\n  "LINK": "0x514910771AF9Ca656af840dff83E8264EcF986CA",\n  "PIP_LINK": "0x9B0C694C6939b5EA9584e9b61C7815E8d97D9cC7",\n  "MCD_JOIN_LINK_A": "0xdFccAf8fDbD2F4805C174f856a317765B49E4a50",\n  "MCD_CLIP_LINK_A": "0x832Dd5f17B30078a5E46Fdb8130A68cBc4a74dC0",\n  "MCD_CLIP_CALC_LINK_A": "0x7B1696677107E48B152e9Bf400293e98B7D86Eb1",\n  "BAL": "0xba100000625a3754423978a60c9317c58a424e3D",\n  "PIP_BAL": "0x3ff860c0F28D69F392543A16A397D0dAe85D16dE",\n  "MCD_JOIN_BAL_A": "0x4a03Aa7fb3973d8f0221B466EefB53D0aC195f55",\n  "MCD_CLIP_BAL_A": "0x6AAc067bb903E633A422dE7BE9355E62B3CE0378",\n  "MCD_CLIP_CALC_BAL_A": "0x79564a41508DA86721eDaDac07A590b5A51B2c01",\n  "YFI": "0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e",\n  "PIP_YFI": "0x5F122465bCf86F45922036970Be6DD7F58820214",\n  "MCD_JOIN_YFI_A": "0x3ff33d9162aD47660083D7DC4bC02Fb231c81677",\n  "MCD_CLIP_YFI_A": "0x9daCc11dcD0aa13386D295eAeeBBd38130897E6f",\n  "MCD_CLIP_CALC_YFI_A": "0x1f206d7916Fd3B1b5B0Ce53d5Cab11FCebc124DA",\n  "GUSD": "0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd",\n  "PIP_GUSD": "0xf45Ae69CcA1b9B043dAE2C83A5B65Bc605BEc5F5",\n  "MCD_JOIN_GUSD_A": "0xe29A14bcDeA40d83675aa43B72dF07f649738C8b",\n  "MCD_CLIP_GUSD_A": "0xa47D68b9dB0A0361284fA04BA40623fcBd1a263E",\n  "MCD_CLIP_CALC_GUSD_A": "0xF7e80359Cb9C4E6D178E6689eD8A6A6f91060747",\n  "MCD_JOIN_PSM_GUSD_A": "0x79A0FA989fb7ADf1F8e80C93ee605Ebb94F7c6A5",\n  "MCD_CLIP_PSM_GUSD_A": "0xf93CC3a50f450ED245e003BFecc8A6Ec1732b0b2",\n  "MCD_CLIP_CALC_PSM_GUSD_A": "0x7f67a68a0ED74Ea89A82eD9F243C159ed43a502a",\n  "MCD_PSM_GUSD_A": "0x204659B2Fd2aD5723975c362Ce2230Fba11d3900",\n  "UNI": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",\n  "PIP_UNI": "0xf363c7e351C96b910b92b45d34190650df4aE8e7",\n  "MCD_JOIN_UNI_A": "0x3BC3A58b4FC1CbE7e98bB4aB7c99535e8bA9b8F1",\n  "MCD_CLIP_UNI_A": "0x3713F83Ee6D138Ce191294C131148176015bC29a",\n  "MCD_CLIP_CALC_UNI_A": "0xeA7FE6610e6708E2AFFA202948cA19ace3F580AE",\n  "RENBTC": "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",\n  "PIP_RENBTC": "0xf185d0682d50819263941e5f4EacC763CC5C6C42",\n  "MCD_JOIN_RENBTC_A": "0xFD5608515A47C37afbA68960c1916b79af9491D0",\n  "MCD_CLIP_RENBTC_A": "0x834719BEa8da68c46484E001143bDDe29370a6A3",\n  "MCD_CLIP_CALC_RENBTC_A": "0xcC89F368aad8D424d3e759c1525065e56019a0F4",\n  "AAVE": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",\n  "PIP_AAVE": "0x8Df8f06DC2dE0434db40dcBb32a82A104218754c",\n  "MCD_JOIN_AAVE_A": "0x24e459F61cEAa7b1cE70Dbaea938940A7c5aD46e",\n  "MCD_CLIP_AAVE_A": "0x8723b74F598DE2ea49747de5896f9034CC09349e",\n  "MCD_CLIP_CALC_AAVE_A": "0x76024a8EfFCFE270e089964a562Ece6ea5f3a14C",\n  "MATIC": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",\n  "PIP_MATIC": "0x8874964279302e6d4e523Fb1789981C39a1034Ba",\n  "MCD_JOIN_MATIC_A": "0x885f16e177d45fC9e7C87e1DA9fd47A9cfcE8E13",\n  "MCD_CLIP_MATIC_A": "0x29342F530ed6120BDB219D602DaFD584676293d1",\n  "MCD_CLIP_CALC_MATIC_A": "0xdF8C347B06a31c6ED11f8213C2366348BFea68dB",\n  "STETH": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",\n  "WSTETH": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",\n  "PIP_WSTETH": "0xFe7a2aC0B945f12089aEEB6eCebf4F384D9f043F",\n  "MCD_JOIN_WSTETH_A": "0x10CD5fbe1b404B7E19Ef964B63939907bdaf42E2",\n  "MCD_CLIP_WSTETH_A": "0x49A33A28C4C7D9576ab28898F4C9ac7e52EA457A",\n  "MCD_CLIP_CALC_WSTETH_A": "0x15282b886675cc1Ce04590148f456428E87eaf13",\n  "ADAI": "0x028171bCA77440897B824Ca71D1c56caC55b68A3",\n  "PIP_ADAI": "0x6A858592fC4cBdf432Fc9A1Bc8A0422B99330bdF",\n  "MCD_JOIN_DIRECT_AAVEV2_DAI": "0xa13C0c8eB109F5A13c6c90FC26AFb23bEB3Fb04a",\n  "MCD_CLIP_DIRECT_AAVEV2_DAI": "0xa93b98e57dDe14A3E301f20933d59DC19BF8212E",\n  "MCD_CLIP_CALC_DIRECT_AAVEV2_DAI": "0x786DC9b69abeA503fd101a2A9fa95bcE82C20d0A",\n  "DIRECT_MOM": "0x99A219f3dD2DeEC02c6324df5009aaa60bA36d38",\n  "UNIV2DAIETH": "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",\n  "PIP_UNIV2DAIETH": "0xFc8137E1a45BAF0030563EC4F0F851bd36a85b7D",\n  "MCD_JOIN_UNIV2DAIETH_A": "0x2502F65D77cA13f183850b5f9272270454094A08",\n  "MCD_CLIP_UNIV2DAIETH_A": "0x9F6981bA5c77211A34B76c6385c0f6FA10414035",\n  "MCD_CLIP_CALC_UNIV2DAIETH_A": "0xf738C272D648Cc4565EaFb43c0C5B35BbA3bf29d",\n  "UNIV2WBTCETH": "0xBb2b8038a1640196FbE3e38816F3e67Cba72D940",\n  "PIP_UNIV2WBTCETH": "0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07",\n  "MCD_JOIN_UNIV2WBTCETH_A": "0xDc26C9b7a8fe4F5dF648E314eC3E6Dc3694e6Dd2",\n  "MCD_CLIP_UNIV2WBTCETH_A": "0xb15afaB996904170f87a64Fe42db0b64a6F75d24",\n  "MCD_CLIP_CALC_UNIV2WBTCETH_A": "0xC94ee71e909DbE08d63aA9e6EFbc9976751601B4",\n  "UNIV2USDCETH": "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc",\n  "PIP_UNIV2USDCETH": "0xf751f24DD9cfAd885984D1bA68860F558D21E52A",\n  "MCD_JOIN_UNIV2USDCETH_A": "0x03Ae53B33FeeAc1222C3f372f32D37Ba95f0F099",\n  "MCD_CLIP_UNIV2USDCETH_A": "0x93AE03815BAF1F19d7F18D9116E4b637cc32A131",\n  "MCD_CLIP_CALC_UNIV2USDCETH_A": "0x022ff40643e8b94C43f0a1E54f51EF6D070AcbC4",\n  "UNIV2DAIUSDC": "0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5",\n  "PIP_UNIV2DAIUSDC": "0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B",\n  "MCD_JOIN_UNIV2DAIUSDC_A": "0xA81598667AC561986b70ae11bBE2dd5348ed4327",\n  "MCD_CLIP_UNIV2DAIUSDC_A": "0x9B3310708af333f6F379FA42a5d09CBAA10ab309",\n  "MCD_CLIP_CALC_UNIV2DAIUSDC_A": "0xbEF2ab2aA5CC780A03bccf22AD3320c8CF35af6A",\n  "UNIV2ETHUSDT": "0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852",\n  "PIP_UNIV2ETHUSDT": "0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016",\n  "MCD_JOIN_UNIV2ETHUSDT_A": "0x4aAD139a88D2dd5e7410b408593208523a3a891d",\n  "MCD_CLIP_UNIV2ETHUSDT_A": "0x2aC4C9b49051275AcB4C43Ec973082388D015D48",\n  "MCD_CLIP_CALC_UNIV2ETHUSDT_A": "0xA475582E3D6Ec35091EaE81da3b423C1B27fa029",\n  "UNIV2LINKETH": "0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974",\n  "PIP_UNIV2LINKETH": "0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F",\n  "MCD_JOIN_UNIV2LINKETH_A": "0xDae88bDe1FB38cF39B6A02b595930A3449e593A6",\n  "MCD_CLIP_UNIV2LINKETH_A": "0x6aa0520354d1b84e1C6ABFE64a708939529b619e",\n  "MCD_CLIP_CALC_UNIV2LINKETH_A": "0x8aCeC2d937a4A4cAF42565aFbbb05ac242134F14",\n  "UNIV2UNIETH": "0xd3d2E2692501A5c9Ca623199D38826e513033a17",\n  "PIP_UNIV2UNIETH": "0x8462A88f50122782Cc96108F476deDB12248f931",\n  "MCD_JOIN_UNIV2UNIETH_A": "0xf11a98339FE1CdE648e8D1463310CE3ccC3d7cC1",\n  "MCD_CLIP_UNIV2UNIETH_A": "0xb0ece6F5542A4577E2f1Be491A937Ccbbec8479e",\n  "MCD_CLIP_CALC_UNIV2UNIETH_A": "0xad609Ed16157014EF955C94553E40e94A09049f0",\n  "UNIV2WBTCDAI": "0x231B7589426Ffe1b75405526fC32aC09D44364c4",\n  "PIP_UNIV2WBTCDAI": "0x5bB72127a196392cf4aC00Cf57aB278394d24e55",\n  "MCD_JOIN_UNIV2WBTCDAI_A": "0xD40798267795Cbf3aeEA8E9F8DCbdBA9b5281fcC",\n  "MCD_CLIP_UNIV2WBTCDAI_A": "0x4fC53a57262B87ABDa61d6d0DB2bE7E9BE68F6b8",\n  "MCD_CLIP_CALC_UNIV2WBTCDAI_A": "0x863AEa7D2c4BF2B5Aa191B057240b6Dc29F532eB",\n  "UNIV2AAVEETH": "0xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f",\n  "PIP_UNIV2AAVEETH": "0x32d8416e8538Ac36272c44b0cd962cD7E0198489",\n  "MCD_JOIN_UNIV2AAVEETH_A": "0x42AFd448Df7d96291551f1eFE1A590101afB1DfF",\n  "MCD_CLIP_UNIV2AAVEETH_A": "0x854b252BA15eaFA4d1609D3B98e00cc10084Ec55",\n  "MCD_CLIP_CALC_UNIV2AAVEETH_A": "0x5396e541E1F648EC03faf338389045F1D7691960",\n  "UNIV2DAIUSDT": "0xB20bd5D04BE54f870D5C0d3cA85d82b34B836405",\n  "PIP_UNIV2DAIUSDT": "0x9A1CD705dc7ac64B50777BcEcA3529E58B1292F1",\n  "MCD_JOIN_UNIV2DAIUSDT_A": "0xAf034D882169328CAf43b823a4083dABC7EEE0F4",\n  "MCD_CLIP_UNIV2DAIUSDT_A": "0xe4B82Be84391b9e7c56a1fC821f47569B364dd4a",\n  "MCD_CLIP_CALC_UNIV2DAIUSDT_A": "0x4E88cE740F6bEa31C2b14134F6C5eB2a63104fcF",\n  "GUNIV3DAIUSDC1": "0xAbDDAfB225e10B90D798bB8A886238Fb835e2053",\n  "PIP_GUNIV3DAIUSDC1": "0x7F6d78CC0040c87943a0e0c140De3F77a273bd58",\n  "MCD_JOIN_GUNIV3DAIUSDC1_A": "0xbFD445A97e7459b0eBb34cfbd3245750Dba4d7a4",\n  "MCD_CLIP_GUNIV3DAIUSDC1_A": "0x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e",\n  "MCD_CLIP_CALC_GUNIV3DAIUSDC1_A": "0x25B17065b94e3fDcD97d94A2DA29E7F77105aDd7",\n  "GUNIV3DAIUSDC2": "0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e",\n  "PIP_GUNIV3DAIUSDC2": "0xcCBa43231aC6eceBd1278B90c3a44711a00F4e93",\n  "MCD_JOIN_GUNIV3DAIUSDC2_A": "0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335",\n  "MCD_CLIP_GUNIV3DAIUSDC2_A": "0xB55da3d3100C4eBF9De755b6DdC24BF209f6cc06",\n  "MCD_CLIP_CALC_GUNIV3DAIUSDC2_A": "0xef051Ca2A2d809ba47ee0FC8caaEd06E3D832225",\n  "MIP21_LIQUIDATION_ORACLE": "0x88f88Bb9E66241B73B84f3A6E197FbBa487b1E30",\n  "RWA001": "0x10b2aA5D77Aa6484886d8e244f0686aB319a270d",\n  "PIP_RWA001": "0x76A9f30B45F4ebFD60Ce8a1c6e963b1605f7cB6d",\n  "MCD_JOIN_RWA001_A": "0x476b81c12Dc71EDfad1F64B9E07CaA60F4b156E2",\n  "RWA001_A_URN": "0xa3342059BcDcFA57a13b12a35eD4BBE59B873005",\n  "RWA001_A_INPUT_CONDUIT": "0x486C85e2bb9801d14f6A8fdb78F5108a0fd932f2",\n  "RWA001_A_OUTPUT_CONDUIT": "0xb3eFb912e1cbC0B26FC17388Dd433Cecd2206C3d",\n  "RWA002": "0xAAA760c2027817169D7C8DB0DC61A2fb4c19AC23",\n  "PIP_RWA002": "0xd2473237E20Bd52F8E7cE0FD79403A6a82fbAEC8",\n  "MCD_JOIN_RWA002_A": "0xe72C7e90bc26c11d45dBeE736F0acf57fC5B7152",\n  "RWA002_A_URN": "0x225B3da5BE762Ee52B182157E67BeA0b31968163",\n  "RWA002_A_INPUT_CONDUIT": "0x2474F297214E5d96Ba4C81986A9F0e5C260f445D",\n  "RWA002_A_OUTPUT_CONDUIT": "0x2474F297214E5d96Ba4C81986A9F0e5C260f445D",\n  "RWA003": "0x07F0A80aD7AeB7BfB7f139EA71B3C8f7E17156B9",\n  "PIP_RWA003": "0xDeF7E88447F7D129420FC881B2a854ABB52B73B8",\n  "MCD_JOIN_RWA003_A": "0x1Fe789BBac5b141bdD795A3Bc5E12Af29dDB4b86",\n  "RWA003_A_URN": "0x7bF825718e7C388c3be16CFe9982539A7455540F",\n  "RWA003_A_INPUT_CONDUIT": "0x2A9798c6F165B6D60Cfb923Fe5BFD6f338695D9B",\n  "RWA003_A_OUTPUT_CONDUIT": "0x2A9798c6F165B6D60Cfb923Fe5BFD6f338695D9B",\n  "RWA004": "0x873F2101047A62F84456E3B2B13df2287925D3F9",\n  "PIP_RWA004": "0x5eEE1F3d14850332A75324514CcbD2DBC8Bbc566",\n  "MCD_JOIN_RWA004_A": "0xD50a8e9369140539D1c2D113c4dC1e659c6242eB",\n  "RWA004_A_URN": "0xeF1699548717aa4Cf47aD738316280b56814C821",\n  "RWA004_A_INPUT_CONDUIT": "0xe1ed3F588A98bF8a3744f4BF74Fd8540e81AdE3f",\n  "RWA004_A_OUTPUT_CONDUIT": "0xe1ed3F588A98bF8a3744f4BF74Fd8540e81AdE3f",\n  "RWA005": "0x6DB236515E90fC831D146f5829407746EDdc5296",\n  "PIP_RWA005": "0x8E6039C558738eb136833aB50271ae065c700d2B",\n  "MCD_JOIN_RWA005_A": "0xA4fD373b93aD8e054970A3d6cd4Fd4C31D08192e",\n  "RWA005_A_URN": "0xc40907545C57dB30F01a1c2acB242C7c7ACB2B90",\n  "RWA005_A_INPUT_CONDUIT": "0x5b702e1fEF3F556cbe219eE697D7f170A236cc66",\n  "RWA005_A_OUTPUT_CONDUIT": "0x5b702e1fEF3F556cbe219eE697D7f170A236cc66",\n  "RWA006": "0x4EE03cfBF6E784c462839f5954d60f7C2B60b113",\n  "PIP_RWA006": "0xB8AeCF04Fdf22Ef6C0c6b6536896e1F2870C41D3",\n  "MCD_JOIN_RWA006_A": "0x5E11E34b6745FeBa9449Ae53c185413d6EdC66BE",\n  "RWA006_A_URN": "0x0C185bf5388DdfDB288F4D875265d456D18FD9Cb",\n  "RWA006_A_INPUT_CONDUIT": "0x8Fe38D1E4293181273E2e323e4c16e0D1d4861e3",\n  "RWA006_A_OUTPUT_CONDUIT": "0x8Fe38D1E4293181273E2e323e4c16e0D1d4861e3",\n  "PROXY_PAUSE_ACTIONS": "0x6bda13D43B7EDd6CAfE1f70fB98b5d40f61A1370",\n  "PROXY_DEPLOYER": "0x1b93556AB8dcCEF01Cd7823C617a6d340f53Fb58",\n  "OPTIMISM_DAI_BRIDGE": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",\n  "OPTIMISM_ESCROW": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",\n  "OPTIMISM_GOV_RELAY": "0x09B354CDA89203BB7B3131CC728dFa06ab09Ae2F",\n  "ARBITRUM_DAI_BRIDGE": "0xD3B5b60020504bc3489D6949d545893982BA3011",\n  "ARBITRUM_ESCROW": "0xA10c7CE4b876998858b1a9E12b10092229539400",\n  "ARBITRUM_GOV_RELAY": "0x9ba25c289e351779E0D481Ba37489317c34A899d"\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"This file contains every vault address and by so, we will be fetching next price of every vault."}),"\n",(0,t.jsxs)(n.h4,{id:"adding-oasischannelts-file",children:["Adding ",(0,t.jsx)(n.a,{href:"#adding-oasischannelts-file",children:"oasisChannel.ts"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { Service, Inject, Container } from 'typedi';\nimport config, { defaultSdkSettings, settings } from '../../config';\n\nimport Maker from '@makerdao/dai';\nimport McdPlugin from '@makerdao/dai-plugin-mcd';\nimport { EPNSChannel } from '../../helpers/epnschannel';\nimport { Logger } from 'winston';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport mainnetAddress from './contractAddress.json';\n\n@Service()\nexport default class oasisChannel extends EPNSChannel {\n  constructor(@Inject('logger') public logger: Logger, @Inject('cached') public cached) {\n    super(logger, {\n      sdkSettings: {\n        epnsCoreSettings: defaultSdkSettings.epnsCoreSettings,\n        epnsCommunicatorSettings: defaultSdkSettings.epnsCommunicatorSettings,\n        networkSettings: defaultSdkSettings.networkSettings,\n      },\n      networkToMonitor: config.web3MainnetNetwork,\n      dirname: __dirname,\n      name: 'Oasis',\n      url: 'https://oasis.app/',\n      useOffChain: true,\n    });\n  }\n\n  async getOraclePrice(provider, pipAddress, slot) {\n    const storageHexToBigNumber = (uint256: string) => {\n      const matches = uint256.match(/^0x(\\w+)$/);\n      if (!matches?.length) {\n        throw new Error(`invalid uint256: ${uint256}`);\n      }\n\n      const match = matches[0];\n      return match.length <= 32\n        ? [new BigNumber(0), new BigNumber(uint256)]\n        : [\n            new BigNumber(`0x${match.substring(0, match.length - 32)}`),\n            new BigNumber(`0x${match.substring(match.length - 32, match.length)}`),\n          ];\n    };\n    const slotCurrent = slot;\n    const priceHex = await provider.getStorageAt(pipAddress, slotCurrent);\n    const p = storageHexToBigNumber(priceHex);\n    return p[1].shiftedBy(-18);\n  }\n\n  public async getLatestPrices() {\n    this.logInfo(`getLatestPrices()`);\n    let priceObject = {};\n\n    const provider = ethers.getDefaultProvider(\n      this.cSettings.networkToMonitor,\n      this.cSettings.sdkSettings.networkSettings,\n    );\n\n    for (const property in mainnetAddress) {\n      if (property.includes('PIP_')) {\n        const currPrice = await this.getOraclePrice(provider, mainnetAddress[property], 3);\n        const nextPrice = await this.getOraclePrice(provider, mainnetAddress[property], 4);\n        priceObject[property.slice(4)] = { currPrice: currPrice.toFormat(2), nextPrice: nextPrice.toFormat(2) };\n      }\n    }\n    this.log(priceObject);\n    return priceObject;\n  }\n\n  public async sendMessageToNode(simulate) {\n    this.logInfo(`Looking at vaults for liquidation alert`);\n    this.logInfo(`Initialising maker and mcd manager`);\n    try {\n      const maker = await Maker.create('http', {\n        plugins: [McdPlugin],\n        url: `https://mainnet.infura.io/v3/${settings.infuraSettings.projectID}`,\n      });\n      const manager = maker.service('mcd:cdpManager');\n      const sdk = await this.getSdk();\n      const users = simulate?.logicOverride?.mode ? [simulate?.logicOverride?.address] : await sdk.getSubscribedUsers();\n      const priceMapping = await this.getLatestPrices();\n      for (let i in users) {\n        const user = users[i];\n        //fetch proxy address set by Oasis:\n        const proxyAddress = await maker.service('proxy').getProxyAddress(user);\n        if (!proxyAddress) {\n          this.logInfo(`User has used Oasis`);\n\n          await this.getVaultDetails(user, proxyAddress, manager, sdk, priceMapping, simulate);\n        } else {\n          this.logInfo(`User has not used Oasis`);\n          continue;\n        }\n      }\n      this.logInfo(`Finished Oasis logic`);\n    } catch (error) {\n      this.logInfo(`${settings.infuraSettings.projectID}`);\n      this.logError(error);\n    }\n  }\n\n  // take collaterl amount\n  // multiply with next price and divide it by debtValue for getting the collateralization ratio\n\n  public async getVaultDetails(\n    user: String,\n    proxyAddress: String,\n    manager: any,\n    sdk: any,\n    priceMapping: any,\n    simulate,\n  ) {\n    try {\n      this.logInfo(`[Oasis]- Checking for ${user}`);\n      //fetch all vaults\n      const data = await manager.getCdpIds(user);\n      this.log(data);\n      for (let i in data) {\n        //fetch details of each vault\n\n        const vault = await manager.getCdp(data[i].id);\n        const ilk = vault.ilk;\n        const nextPriceVault = parseFloat(priceMapping[ilk.slice(0, -2)].nextPrice.replace(/,/g, ''));\n\n        const vaultid = vault.id;\n        const collateralAmount = parseFloat(vault.collateralAmount); // amount of collateral tokens\n        const debtValue = parseFloat(vault.debtValue); // amount of Dai debt\n        const collateralizationRatio = parseFloat(vault.collateralizationRatio); // collateralValue / debt\n        const liquidationPrice = parseFloat(vault.liquidationPrice); // vault becomes unsafe at this price\n        const isSafe = vault.isSafe; //bool value if vault is safe or not\n        const collateralizationNextPrice = (nextPriceVault * collateralAmount * 100) / debtValue;\n        const liquidationRatio = (liquidationPrice * collateralAmount) / debtValue;\n\n        if (debtValue !== 0) {\n          this.logInfo(`liquidationRatio : ${liquidationRatio}`);\n          this.logInfo(`collateralizationNextPrice : ${collateralizationNextPrice}`);\n          this.logInfo(`isSafe : ${isSafe}`);\n          this.logInfo(`nextPriceVault : ${isSafe}`);\n          this.logInfo(`collateralAmount : ${vault.collateralAmount}`);\n          this.logInfo(`Vault : ${vault.ilk}`);\n          if (isSafe && collateralizationNextPrice <= 175) {\n            this.logInfo(`Vault is safe but is at risk of liquidation`);\n\n            await this.sendOasisNotification(\n              user,\n              vaultid,\n              1,\n              collateralizationNextPrice,\n              liquidationRatio * 100,\n              ilk,\n              simulate,\n            );\n          } else if (!isSafe) {\n            this.logInfo(`Vault is unsafe`);\n            await this.sendOasisNotification(user, vaultid, 2, null, null, ilk, simulate);\n          }\n        } else {\n          this.logInfo('Debt Value is 0 for this vault!');\n        }\n      }\n    } catch (err) {\n      this.logError(err);\n    }\n  }\n\n  public async sendOasisNotification(\n    user,\n    vaultid,\n    type,\n    collateralizationRatio = null,\n    liquidationRatio = null,\n    ilk,\n    simulate,\n  ) {\n    let title, message, payloadTitle, payloadMsg, notifType, cta, storageType, trxConfirmWait, payload, ipfsHash, tx;\n    const sdk = await this.getSdk();\n    const epns = sdk.advanced.getInteractableContracts(\n      config.web3RopstenNetwork,\n      settings,\n      this.walletKey,\n      config.deployedContract,\n      config.deployedContractABI,\n    );\n    cta = `https://oasis.app/${vaultid}`;\n\n    switch (type) {\n      case 1: //for funds about to get liquidated\n        this.logger.info(`+ Sending notification for vault ${vaultid} which is at risk of liquidation`);\n        title = `Vault ${vaultid} is at Risk`;\n        // message = `Your Vault ${ilk} ${vaultid} is ${Math.floor(percent)}% away from liquidation `\n        message = `Your ${ilk} Vault ${vaultid} has reached a collateralization ratio of ${collateralizationRatio.toFixed()}%.\\nThe liquidation ratio for this vault is ${liquidationRatio.toFixed()}%.\\nClick here to visit your vault!`;\n        payloadTitle = `Vault ${vaultid} is at Risk`;\n        // payloadMsg = `Your Vault [t:${ilk}] [d:${vaultid}] is [s:${percent}]% away from liquidation [timestamp: ${Math.floor(new Date() / 1000)}]`;\n        payloadMsg = `Your [t:${ilk}] Vault [d:${vaultid}] has reached a collateralization ratio of [s:${collateralizationRatio.toFixed()}%].\\nThe liquidation ratio for this vault is [b:${liquidationRatio.toFixed()}]%.\\n\\nClick here to visit your vault!`;\n\n        notifType = 3;\n        storageType = 1;\n        trxConfirmWait = 0;\n        await this.sendNotification({\n          recipient: user,\n          notificationType: notifType,\n          title: title,\n          message: message,\n          payloadTitle: payloadTitle,\n          payloadMsg: payloadMsg,\n          image: null,\n          simulate: simulate,\n        });\n\n      case 2: //for funds that are below LR\n        this.logger.info(\n          `[${new Date(Date.now())}]-[Oasis]- Sending notification for vault ${vaultid} which is undercollateralised`,\n        );\n        title = `Vault ${vaultid} is at Risk`;\n        message = `Your Vault ${ilk} ${vaultid} is below liquidation ratio.`;\n        payloadTitle = `Vault ${vaultid} is at Risk`;\n        payloadMsg = `Your Vault [t:${ilk}] [d:${vaultid}] is below liquidation ratio. [timestamp: ${Math.floor(\n          Date.now() / 1000,\n        )}]`;\n        notifType = 3;\n        storageType = 1;\n        trxConfirmWait = 0;\n\n        await this.sendNotification({\n          recipient: user,\n          notificationType: notifType,\n          title: title,\n          message: message,\n          payloadTitle: payloadTitle,\n          payloadMsg: payloadMsg,\n          image: null,\n          simulate: simulate,\n        });\n    }\n  }\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's understand this code by sections -"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { Service, Inject, Container } from 'typedi';\nimport config, { defaultSdkSettings, settings } from '../../config';\n\nimport Maker from '@makerdao/dai';\nimport McdPlugin from '@makerdao/dai-plugin-mcd';\nimport { EPNSChannel } from '../../helpers/epnschannel';\nimport { Logger } from 'winston';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport mainnetAddress from './contractAddress.json';\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here we are importing all the necessary files and packages for our channel file to gear up."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// fetching next price from contract storage\nasync getOraclePrice(provider, pipAddress, slot) {\n    const storageHexToBigNumber = (uint256: string) => {\n      const matches = uint256.match(/^0x(\\w+)$/);\n      if (!matches?.length) {\n        throw new Error(`invalid uint256: ${uint256}`);\n      }\n\n      const match = matches[0];\n      return match.length <= 32\n        ? [new BigNumber(0), new BigNumber(uint256)]\n        : [\n            new BigNumber(`0x${match.substring(0, match.length - 32)}`),\n            new BigNumber(`0x${match.substring(match.length - 32, match.length)}`),\n          ];\n    };\n    const slotCurrent = slot;\n    const priceHex = await provider.getStorageAt(pipAddress, slotCurrent);\n    const p = storageHexToBigNumber(priceHex);\n    return p[1].shiftedBy(-18);\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"This set of code is used to fetch the next price for every vault from their respective oracles."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// fetching next price for every vault and storing into a mapping.\npublic async getLatestPrices() {\n    this.logInfo(`getLatestPrices()`);\n    let priceObject = {};\n\n    const provider = ethers.getDefaultProvider(\n      this.cSettings.networkToMonitor,\n      this.cSettings.sdkSettings.networkSettings,\n    );\n\n    for (const property in mainnetAddress) {\n      if (property.includes('PIP_')) {\n        const currPrice = await this.getOraclePrice(provider, mainnetAddress[property], 3);\n        const nextPrice = await this.getOraclePrice(provider, mainnetAddress[property], 4);\n        priceObject[property.slice(4)] = { currPrice: currPrice.toFormat(2), nextPrice: nextPrice.toFormat(2) };\n      }\n    }\n    this.log(priceObject);\n    return priceObject;\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here we are mapping over every vault and fetching their next price using ",(0,t.jsx)(n.code,{children:"getOraclePrice"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// details of every vault\npublic async getVaultDetails(\n    user: String,\n    proxyAddress: String,\n    manager: any,\n    sdk: any,\n    priceMapping: any,\n    simulate,\n  ) {\n    try {\n      this.logInfo(`[Oasis]- Checking for ${user}`);\n      //fetch all vaults\n      const data = await manager.getCdpIds(user);\n      this.log(data);\n      for (let i in data) {\n        //fetch details of each vault\n\n        const vault = await manager.getCdp(data[i].id);\n        const ilk = vault.ilk;\n        const nextPriceVault = parseFloat(priceMapping[ilk.slice(0, -2)].nextPrice.replace(/,/g, ''));\n\n        const vaultid = vault.id;\n        const collateralAmount = parseFloat(vault.collateralAmount); // amount of collateral tokens\n        const debtValue = parseFloat(vault.debtValue); // amount of Dai debt\n        const collateralizationRatio = parseFloat(vault.collateralizationRatio); // collateralValue / debt\n        const liquidationPrice = parseFloat(vault.liquidationPrice); // vault becomes unsafe at this price\n        const isSafe = vault.isSafe; //bool value if vault is safe or not\n        const collateralizationNextPrice = (nextPriceVault * collateralAmount * 100) / debtValue;\n        const liquidationRatio = (liquidationPrice * collateralAmount) / debtValue;\n\n        if (debtValue !== 0) {\n          this.logInfo(`liquidationRatio : ${liquidationRatio}`);\n          this.logInfo(`collateralizationNextPrice : ${collateralizationNextPrice}`);\n          this.logInfo(`isSafe : ${isSafe}`);\n          this.logInfo(`nextPriceVault : ${isSafe}`);\n          this.logInfo(`collateralAmount : ${vault.collateralAmount}`);\n          this.logInfo(`Vault : ${vault.ilk}`);\n          if (isSafe && collateralizationNextPrice <= 175) {\n            this.logInfo(`Vault is safe but is at risk of liquidation`);\n\n            await this.sendOasisNotification(\n              user,\n              vaultid,\n              1,\n              collateralizationNextPrice,\n              liquidationRatio * 100,\n              ilk,\n              simulate,\n            );\n          } else if (!isSafe) {\n            this.logInfo(`Vault is unsafe`);\n            await this.sendOasisNotification(user, vaultid, 2, null, null, ilk, simulate);\n          }\n        } else {\n          this.logInfo('Debt Value is 0 for this vault!');\n        }\n      }\n    } catch (err) {\n      this.logError(err);\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As we are done with next price of every vault, it's time to look into the method for getting other details, so here we are using ",(0,t.jsx)(n.code,{children:"manager"})," for getting ",(0,t.jsx)(n.code,{children:"CdpIds"})," for a given user, for getting into more details, refer the docs ",(0,t.jsx)(n.a,{href:"https://docs.makerdao.com/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// util function for sending notification\npublic async sendOasisNotification(\n    user,\n    vaultid,\n    type,\n    collateralizationRatio = null,\n    liquidationRatio = null,\n    ilk,\n    simulate,\n  ) {\n    let title, message, payloadTitle, payloadMsg, notifType, cta, storageType, trxConfirmWait, payload, ipfsHash, tx;\n    const sdk = await this.getSdk();\n    const epns = sdk.advanced.getInteractableContracts(\n      config.web3RopstenNetwork,\n      settings,\n      this.walletKey,\n      config.deployedContract,\n      config.deployedContractABI,\n    );\n    cta = `https://oasis.app/${vaultid}`;\n\n    switch (type) {\n      case 1: //for funds about to get liquidated\n        this.logger.info(`+ Sending notification for vault ${vaultid} which is at risk of liquidation`);\n        title = `Vault ${vaultid} is at Risk`;\n        // message = `Your Vault ${ilk} ${vaultid} is ${Math.floor(percent)}% away from liquidation `\n        message = `Your ${ilk} Vault ${vaultid} has reached a collateralization ratio of ${collateralizationRatio.toFixed()}%.\\nThe liquidation ratio for this vault is ${liquidationRatio.toFixed()}%.\\nClick here to visit your vault!`;\n        payloadTitle = `Vault ${vaultid} is at Risk`;\n        // payloadMsg = `Your Vault [t:${ilk}] [d:${vaultid}] is [s:${percent}]% away from liquidation [timestamp: ${Math.floor(new Date() / 1000)}]`;\n        payloadMsg = `Your [t:${ilk}] Vault [d:${vaultid}] has reached a collateralization ratio of [s:${collateralizationRatio.toFixed()}%].\\nThe liquidation ratio for this vault is [b:${liquidationRatio.toFixed()}]%.\\n\\nClick here to visit your vault!`;\n\n        notifType = 3;\n        storageType = 1;\n        trxConfirmWait = 0;\n        await this.sendNotification({\n          recipient: user,\n          notificationType: notifType,\n          title: title,\n          message: message,\n          payloadTitle: payloadTitle,\n          payloadMsg: payloadMsg,\n          image: null,\n          simulate: simulate,\n        });\n\n      case 2: //for funds that are below LR\n        this.logger.info(\n          `[${new Date(Date.now())}]-[Oasis]- Sending notification for vault ${vaultid} which is undercollateralised`,\n        );\n        title = `Vault ${vaultid} is at Risk`;\n        message = `Your Vault ${ilk} ${vaultid} is below liquidation ratio.`;\n        payloadTitle = `Vault ${vaultid} is at Risk`;\n        payloadMsg = `Your Vault [t:${ilk}] [d:${vaultid}] is below liquidation ratio. [timestamp: ${Math.floor(\n          Date.now() / 1000,\n        )}]`;\n        notifType = 3;\n        storageType = 1;\n        trxConfirmWait = 0;\n\n        await this.sendNotification({\n          recipient: user,\n          notificationType: notifType,\n          title: title,\n          message: message,\n          payloadTitle: payloadTitle,\n          payloadMsg: payloadMsg,\n          image: null,\n          simulate: simulate,\n        });\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As we have a complex use case for notifications, we are sending notifications over few condition with the help of ",(0,t.jsx)(n.code,{children:"sendOasisNotification"})," util function."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// Final set of code to send notifications\npublic async sendMessageToNode(simulate) {\n    this.logInfo(`Looking at vaults for liquidation alert`);\n    this.logInfo(`Initialising maker and mcd manager`);\n    try {\n      const maker = await Maker.create('http', {\n        plugins: [McdPlugin],\n        url: `https://mainnet.infura.io/v3/${settings.infuraSettings.projectID}`,\n      });\n      const manager = maker.service('mcd:cdpManager');\n      const sdk = await this.getSdk();\n      const users = simulate?.logicOverride?.mode ? [simulate?.logicOverride?.address] : await sdk.getSubscribedUsers();\n      const priceMapping = await this.getLatestPrices();\n      for (let i in users) {\n        const user = users[i];\n        //fetch proxy address set by Oasis:\n        const proxyAddress = await maker.service('proxy').getProxyAddress(user);\n        if (!proxyAddress) {\n          this.logInfo(`User has used Oasis`);\n\n          await this.getVaultDetails(user, proxyAddress, manager, sdk, priceMapping, simulate);\n        } else {\n          this.logInfo(`User has not used Oasis`);\n          continue;\n        }\n      }\n      this.logInfo(`Finished Oasis logic`);\n    } catch (error) {\n      this.logInfo(`${settings.infuraSettings.projectID}`);\n      this.logError(error);\n    }\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"Phewww!! That's a lot of code!"}),"\n",(0,t.jsx)(n.p,{children:"After setting up all the methods, this function will be sending the notifications with all the helpers including in it."}),"\n",(0,t.jsxs)(n.h4,{id:"adding-oasisjobsts-file",children:["Adding ",(0,t.jsx)(n.a,{href:"#adding-oasisjobsts-file",children:"oasisJobs.ts"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// Do Scheduling\n// https://github.com/node-schedule/node-schedule\n// *    *    *    *    *    *\n// \u252c    \u252c    \u252c    \u252c    \u252c    \u252c\n// \u2502    \u2502    \u2502    \u2502    \u2502    \u2502\n// \u2502    \u2502    \u2502    \u2502    \u2502    \u2514 day of week (0 - 7) (0 or 7 is Sun)\n// \u2502    \u2502    \u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n// \u2502    \u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31)\n// \u2502    \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n// \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 second (0 - 59, OPTIONAL)\n// Execute a cron job every 5 Minutes = */5 * * * *\n// Starts from seconds = * * * * * *\n\nimport logger from '../../loaders/logger';\n\nimport { Container } from 'typedi';\nimport schedule from 'node-schedule';\nimport OasisChannel from './oasisChannel';\nexport default () => {\n  const startTime = new Date(new Date().setHours(0, 0, 0, 0));\n\n  const threeHourRule = new schedule.RecurrenceRule();\n  threeHourRule.hour = new schedule.Range(0, 23, 3);\n  threeHourRule.minute = 0;\n\n  // OASIS CHANNEL\n  logger.info(\n    `     \ud83d\udef5 Scheduling Showrunner - Oasis Channel[3 Hours] [${new Date(Date.now())}]`\n  );\n  schedule.scheduleJob(\n    { start: startTime, rule: threeHourRule },\n    async function () {\n      const oasis = Container.get(OasisChannel);\n      const taskName = 'Oasis check vault situation and sendMessageToNode()';\n\n      try {\n        await oasis.sendMessageToNode(false);\n        logger.info(`\ud83d\udc23 Cron Task Completed -- ${taskName}`);\n      } catch (err) {\n        logger.error(`\u274c Cron Task Failed -- ${taskName}`);\n        logger.error(`Error Object: %o`, err);\n      }\n    }\n  );\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"After setting up the channel file, we are setting up a three hour rule for hitting the notification triggering method every 3 hours."}),"\n",(0,t.jsxs)(n.h4,{id:"adding-oasisroutests-file",children:["Adding ",(0,t.jsx)(n.a,{href:"#adding-oasisroutests-file",children:"oasisRoutes.ts"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { Router, Request, Response, NextFunction } from 'express';\nimport { Container } from 'typedi';\nimport { celebrate, Joi } from 'celebrate';\nimport OasisChannel from './oasisChannel';\nimport middlewares from '../../api/middlewares';\nimport { Logger } from 'winston';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  app.use('/showrunners/oasis', route);\n\n  // to add an incoming feed\n  route.post(\n    '/send_message',\n    celebrate({\n      body: Joi.object({\n        simulate: [Joi.bool(), Joi.object()],\n      }),\n    }),\n    middlewares.onlyLocalhost,\n    async (req: Request, res: Response, next: NextFunction) => {\n      const logger: Logger = Container.get('logger');\n      logger.debug('Calling /showrunners/oasis/send_message ticker endpoint with body: %o', req.body);\n      try {\n        const channel = Container.get(OasisChannel);\n        const response = await channel.sendMessageToNode(req?.body.simulate);\n        return res.status(201).json(response);\n      } catch (e) {\n        logger.error('\ud83d\udd25 error: %o', e);\n        return next(e);\n      }\n    },\n  );\n};\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now the last part of setting up the routes for manually triggering the notification with the above set of code."}),"\n",(0,t.jsx)(n.h4,{id:"setting-up-keys-file-for-channel",children:"Setting up keys file for channel"}),"\n",(0,t.jsxs)(n.p,{children:["This file would be named ",(0,t.jsx)(n.a,{href:"#",children:"oasisKeys.json"}),", and it would contain the private keys of the channel"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'{\n    "PRIVATE_KEY": "0x_PRIVATE_KEY"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can now heat up the server by running ",(0,t.jsx)(n.code,{children:"docker-compose up"})," and ",(0,t.jsx)(n.code,{children:"npm run dev"})," and start sending notification."]}),"\n",(0,t.jsx)(n.p,{children:"That's all for now :)"}),"\n",(0,t.jsxs)(n.p,{children:["If you enjoyed this tutorial, Do join our ",(0,t.jsx)(n.a,{href:"https://discord.com/invite/pushprotocol",children:"discord server"})," to meet other dev and builders."]})]})}function C(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);